// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: predefined_cards.sql

package models

import (
	"context"
)

const createPredefinedCard = `-- name: CreatePredefinedCard :one
INSERT INTO predefined_cards (
    card_key,
    name,
    issuer,
    card_type,
    default_reward_rate,
    reward_type,
    point_value,
    annual_fee,
    annual_fee_waiver
) VALUES (
    ?, -- card_key
    ?, -- name
    ?, -- issuer
    ?, -- card_type
    ?, -- default_reward_rate
    ?, -- reward_type
    ?, -- point_value
    ?, -- annual_fee
    ? -- annual_fee_waiver
)
ON CONFLICT (card_key) DO UPDATE SET
    name = excluded.name,
    issuer = excluded.issuer,
    card_type = excluded.card_type,
    default_reward_rate = excluded.default_reward_rate,
    reward_type = excluded.reward_type,
    point_value = excluded.point_value,
    annual_fee = excluded.annual_fee,
    annual_fee_waiver = excluded.annual_fee_waiver
RETURNING id, card_key, name, issuer, card_type, default_reward_rate, reward_type, point_value, annual_fee, annual_fee_waiver, created_at, updated_at
`

type CreatePredefinedCardParams struct {
	CardKey           string  `json:"card_key"`
	Name              string  `json:"name"`
	Issuer            string  `json:"issuer"`
	CardType          string  `json:"card_type"`
	DefaultRewardRate float64 `json:"default_reward_rate"`
	RewardType        string  `json:"reward_type"`
	PointValue        float64 `json:"point_value"`
	AnnualFee         int64   `json:"annual_fee"`
	AnnualFeeWaiver   *string `json:"annual_fee_waiver"`
}

func (q *Queries) CreatePredefinedCard(ctx context.Context, arg CreatePredefinedCardParams) (*PredefinedCard, error) {
	row := q.queryRow(ctx, q.createPredefinedCardStmt, createPredefinedCard,
		arg.CardKey,
		arg.Name,
		arg.Issuer,
		arg.CardType,
		arg.DefaultRewardRate,
		arg.RewardType,
		arg.PointValue,
		arg.AnnualFee,
		arg.AnnualFeeWaiver,
	)
	var i PredefinedCard
	err := row.Scan(
		&i.ID,
		&i.CardKey,
		&i.Name,
		&i.Issuer,
		&i.CardType,
		&i.DefaultRewardRate,
		&i.RewardType,
		&i.PointValue,
		&i.AnnualFee,
		&i.AnnualFeeWaiver,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createPredefinedRewardRule = `-- name: CreatePredefinedRewardRule :one
INSERT INTO predefined_reward_rules (
    predefined_card_id,
    type,
    entity_name,
    reward_rate,
    reward_type
) VALUES (
    ?, -- predefined_card_id
    ?, -- type
    ?, -- entity_name
    ?, -- reward_rate
    ? -- reward_type
) RETURNING id, predefined_card_id, type, entity_name, reward_rate, reward_type, created_at, updated_at
`

type CreatePredefinedRewardRuleParams struct {
	PredefinedCardID int64   `json:"predefined_card_id"`
	Type             string  `json:"type"`
	EntityName       string  `json:"entity_name"`
	RewardRate       float64 `json:"reward_rate"`
	RewardType       string  `json:"reward_type"`
}

func (q *Queries) CreatePredefinedRewardRule(ctx context.Context, arg CreatePredefinedRewardRuleParams) (*PredefinedRewardRule, error) {
	row := q.queryRow(ctx, q.createPredefinedRewardRuleStmt, createPredefinedRewardRule,
		arg.PredefinedCardID,
		arg.Type,
		arg.EntityName,
		arg.RewardRate,
		arg.RewardType,
	)
	var i PredefinedRewardRule
	err := row.Scan(
		&i.ID,
		&i.PredefinedCardID,
		&i.Type,
		&i.EntityName,
		&i.RewardRate,
		&i.RewardType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAllPredefinedCards = `-- name: GetAllPredefinedCards :many
SELECT id, card_key, name, issuer, card_type, default_reward_rate, reward_type, point_value, annual_fee, annual_fee_waiver, created_at, updated_at FROM predefined_cards
ORDER BY issuer, name
`

func (q *Queries) GetAllPredefinedCards(ctx context.Context) ([]*PredefinedCard, error) {
	rows, err := q.query(ctx, q.getAllPredefinedCardsStmt, getAllPredefinedCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PredefinedCard
	for rows.Next() {
		var i PredefinedCard
		if err := rows.Scan(
			&i.ID,
			&i.CardKey,
			&i.Name,
			&i.Issuer,
			&i.CardType,
			&i.DefaultRewardRate,
			&i.RewardType,
			&i.PointValue,
			&i.AnnualFee,
			&i.AnnualFeeWaiver,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPredefinedCardByKey = `-- name: GetPredefinedCardByKey :one
SELECT id, card_key, name, issuer, card_type, default_reward_rate, reward_type, point_value, annual_fee, annual_fee_waiver, created_at, updated_at FROM predefined_cards
WHERE card_key = ?
LIMIT 1
`

func (q *Queries) GetPredefinedCardByKey(ctx context.Context, cardKey string) (*PredefinedCard, error) {
	row := q.queryRow(ctx, q.getPredefinedCardByKeyStmt, getPredefinedCardByKey, cardKey)
	var i PredefinedCard
	err := row.Scan(
		&i.ID,
		&i.CardKey,
		&i.Name,
		&i.Issuer,
		&i.CardType,
		&i.DefaultRewardRate,
		&i.RewardType,
		&i.PointValue,
		&i.AnnualFee,
		&i.AnnualFeeWaiver,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getPredefinedRewardRulesByCardID = `-- name: GetPredefinedRewardRulesByCardID :many
SELECT id, predefined_card_id, type, entity_name, reward_rate, reward_type, created_at, updated_at FROM predefined_reward_rules
WHERE predefined_card_id = ?
ORDER BY type, entity_name
`

func (q *Queries) GetPredefinedRewardRulesByCardID(ctx context.Context, predefinedCardID int64) ([]*PredefinedRewardRule, error) {
	rows, err := q.query(ctx, q.getPredefinedRewardRulesByCardIDStmt, getPredefinedRewardRulesByCardID, predefinedCardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PredefinedRewardRule
	for rows.Next() {
		var i PredefinedRewardRule
		if err := rows.Scan(
			&i.ID,
			&i.PredefinedCardID,
			&i.Type,
			&i.EntityName,
			&i.RewardRate,
			&i.RewardType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
