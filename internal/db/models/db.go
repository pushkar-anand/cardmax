// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCardStmt, err = db.PrepareContext(ctx, createCard); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCard: %w", err)
	}
	if q.createPredefinedCardStmt, err = db.PrepareContext(ctx, createPredefinedCard); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePredefinedCard: %w", err)
	}
	if q.createPredefinedRewardRuleStmt, err = db.PrepareContext(ctx, createPredefinedRewardRule); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePredefinedRewardRule: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCardStmt, err = db.PrepareContext(ctx, deleteCard); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCard: %w", err)
	}
	if q.getAllPredefinedCardsStmt, err = db.PrepareContext(ctx, getAllPredefinedCards); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPredefinedCards: %w", err)
	}
	if q.getCardByIDAndUserStmt, err = db.PrepareContext(ctx, getCardByIDAndUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardByIDAndUser: %w", err)
	}
	if q.getCardByNameIssuerAndUserStmt, err = db.PrepareContext(ctx, getCardByNameIssuerAndUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardByNameIssuerAndUser: %w", err)
	}
	if q.getPredefinedCardByKeyStmt, err = db.PrepareContext(ctx, getPredefinedCardByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetPredefinedCardByKey: %w", err)
	}
	if q.getPredefinedRewardRulesByCardIDStmt, err = db.PrepareContext(ctx, getPredefinedRewardRulesByCardID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPredefinedRewardRulesByCardID: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listCardsByUserStmt, err = db.PrepareContext(ctx, listCardsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListCardsByUser: %w", err)
	}
	if q.updateCardStmt, err = db.PrepareContext(ctx, updateCard); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCard: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCardStmt != nil {
		if cerr := q.createCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCardStmt: %w", cerr)
		}
	}
	if q.createPredefinedCardStmt != nil {
		if cerr := q.createPredefinedCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPredefinedCardStmt: %w", cerr)
		}
	}
	if q.createPredefinedRewardRuleStmt != nil {
		if cerr := q.createPredefinedRewardRuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPredefinedRewardRuleStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCardStmt != nil {
		if cerr := q.deleteCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCardStmt: %w", cerr)
		}
	}
	if q.getAllPredefinedCardsStmt != nil {
		if cerr := q.getAllPredefinedCardsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPredefinedCardsStmt: %w", cerr)
		}
	}
	if q.getCardByIDAndUserStmt != nil {
		if cerr := q.getCardByIDAndUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardByIDAndUserStmt: %w", cerr)
		}
	}
	if q.getCardByNameIssuerAndUserStmt != nil {
		if cerr := q.getCardByNameIssuerAndUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardByNameIssuerAndUserStmt: %w", cerr)
		}
	}
	if q.getPredefinedCardByKeyStmt != nil {
		if cerr := q.getPredefinedCardByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPredefinedCardByKeyStmt: %w", cerr)
		}
	}
	if q.getPredefinedRewardRulesByCardIDStmt != nil {
		if cerr := q.getPredefinedRewardRulesByCardIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPredefinedRewardRulesByCardIDStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listCardsByUserStmt != nil {
		if cerr := q.listCardsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCardsByUserStmt: %w", cerr)
		}
	}
	if q.updateCardStmt != nil {
		if cerr := q.updateCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCardStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	createCardStmt                       *sql.Stmt
	createPredefinedCardStmt             *sql.Stmt
	createPredefinedRewardRuleStmt       *sql.Stmt
	createUserStmt                       *sql.Stmt
	deleteCardStmt                       *sql.Stmt
	getAllPredefinedCardsStmt            *sql.Stmt
	getCardByIDAndUserStmt               *sql.Stmt
	getCardByNameIssuerAndUserStmt       *sql.Stmt
	getPredefinedCardByKeyStmt           *sql.Stmt
	getPredefinedRewardRulesByCardIDStmt *sql.Stmt
	getUserByIDStmt                      *sql.Stmt
	getUserByUsernameStmt                *sql.Stmt
	listCardsByUserStmt                  *sql.Stmt
	updateCardStmt                       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		createCardStmt:                       q.createCardStmt,
		createPredefinedCardStmt:             q.createPredefinedCardStmt,
		createPredefinedRewardRuleStmt:       q.createPredefinedRewardRuleStmt,
		createUserStmt:                       q.createUserStmt,
		deleteCardStmt:                       q.deleteCardStmt,
		getAllPredefinedCardsStmt:            q.getAllPredefinedCardsStmt,
		getCardByIDAndUserStmt:               q.getCardByIDAndUserStmt,
		getCardByNameIssuerAndUserStmt:       q.getCardByNameIssuerAndUserStmt,
		getPredefinedCardByKeyStmt:           q.getPredefinedCardByKeyStmt,
		getPredefinedRewardRulesByCardIDStmt: q.getPredefinedRewardRulesByCardIDStmt,
		getUserByIDStmt:                      q.getUserByIDStmt,
		getUserByUsernameStmt:                q.getUserByUsernameStmt,
		listCardsByUserStmt:                  q.listCardsByUserStmt,
		updateCardStmt:                       q.updateCardStmt,
	}
}
